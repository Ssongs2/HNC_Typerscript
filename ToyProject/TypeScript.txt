1. 환경 설정
Javascript -> Typescript

parcel.js 가 Typescript를 이용해서 앱을 만드는데 필요한 설정을 만들어 놓음.
.cache, node_modules, package.json ...

map - sourcemap 소스의 지도와 같은 것 
dist - typescript를 Javascript로 변환해 놓은 폴더
.js.map - 브라우저에서 실행했을 때 만약에 코드에 문제가 발견되었을 때
실제 타입스크립트 원본과 비교하기 위한 연결을 도와주는 파일.

Type
primitive - 문자열, 숫자, boolean, null, undfined, 
object

type, interface - UpperCase

타입 추론 - i라는 변수의 타입은 숫자를 넣고있으니 Number 타입이라는 추론 
타입을 할 수 있는 상황이라고 하면, 컴파일러가 타입을 지정해줌.
=============================================================================
2. extends

GENERIC - 입력이 여러 개면 출력도 여러 개
// 호출해주는 쪽에서 유형을 명시해주면, 그 유형을 고대로 받아서 반환값으로 주겠다

function<Generinc>() : Generinc
=============================================================================
3. interface, mixin

interface는 compiler에게 알려주는 것.

Mixin
기능을 확장 - extends의 기능을 우리가 만드는 것
왜 생성자를 만들면 안되지?

Mixin 사용 이유

1 - extends 코드에 적시되어야 함. 
만약 확장관계를 바꾸려면 또 다시 바꿔야 함. 
유연성이 부족

2 - 다중 상속을 지원하지 않음 
API1,2,3로 모두에게 상속 받고싶을 수도 있잖아.

번 외
// 의사코드 - 흐름을 확인하며 코딩하는 작업

innerHtml 하나의 문자열만 들어가야 함.
join() 배열의 요소를 하나의 문자열로 함쳐줌 
() 구분자
=============================================================================
디렉토리

router, view, API

types - 인터페이스
core - 공통
page -

설정 관련 
URL

import export
=============================================================================


1. type{,}과 interface{;}를 통해 정의를 한다.
2. type에 대한 설명을 좀 더 풍부하게 함으로써, 
유지보수측면에서 더 효과를 볼 수있다.
3. type Alias 와 interface가 가장 다른 점
- 타입 2개를 합치거나 intersection을 만드는 것을 지원하지 않음
=============================================================================

비동기 코드 -> 동기코드
API 호출 후 응답을 받을 때까지 UI가 멈춰있음.
